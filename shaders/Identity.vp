// Skybox Shader
// Vertex Shader
// Richard S. Wright Jr.
// OpenGL SuperBible
#version 130

// Incoming per vertex... just the position
in vec4 vVertex;
in vec2 vTexture0;

uniform mat4 pMatrix;  // Transformation matrix
uniform mat4 mvMatrix;
uniform vec2 textureOffset;
// Texture Coordinate to fragment program
smooth out vec2 vVaryingTexCoord;

void main(void) 
{
    // Pass on the texture coordinates 
    vVaryingTexCoord = vTexture0+textureOffset;
	mat4 ModelView = mvMatrix;
	ModelView[0][0] = -1;
ModelView[0][1] = 0;
ModelView[0][2] = 0;

// Column 1:
ModelView[1][0] = 0;
ModelView[1][1] = -1;
ModelView[1][2] = 0;

// Column 2:
ModelView[2][0] = 0;
ModelView[2][1] = 0;
ModelView[2][2] = 1;
    // Don't forget to transform the geometry!
	vec4 P = ModelView * vVertex;
    gl_Position = pMatrix * P;
}
